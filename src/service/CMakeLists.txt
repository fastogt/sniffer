SET(SERVICE_NAME ${PROJECT_NAME}_service)
SET(SERVICE_NAME_EXE ${SERVICE_NAME}_s)

SET(GLOBAL_HEADERS
  ${CMAKE_CURRENT_SOURCE_DIR}/sniffer_db.h
  ${CMAKE_CURRENT_SOURCE_DIR}/master_service.h
  ${CMAKE_CURRENT_SOURCE_DIR}/config.h
  ${CMAKE_CURRENT_SOURCE_DIR}/folder_change_reader.h
  ${CMAKE_CURRENT_SOURCE_DIR}/database_holder.h
)
SET(GLOBAL_SOURCES
  ${CMAKE_CURRENT_SOURCE_DIR}/sniffer_db.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/master_service.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/config.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/folder_change_reader.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/database_holder.cpp
)

SET(DATABASE_HEADERS
  ${CMAKE_CURRENT_SOURCE_DIR}/database/connection.h
)

SET(DATABASE_SOURCES
  ${CMAKE_CURRENT_SOURCE_DIR}/database/connection.cpp
)

SET(ARCHIVE_HEADERS
  ${CMAKE_CURRENT_SOURCE_DIR}/archive/tar_gz.h
)

SET(ARCHIVE_SOURCES
  ${CMAKE_CURRENT_SOURCE_DIR}/archive/tar_gz.cpp
)

# HARDWARE specific
IF(NOT DEFINED HARDWARE_LICENSE_ALGO)
  SET(HARDWARE_LICENSE_ALGO 0)
ENDIF(NOT DEFINED HARDWARE_LICENSE_ALGO)

SET(LICENSE_KEY "" CACHE STRING "Hardware specific key")
MESSAGE(STATUS "LICENSE_KEY: ${LICENSE_KEY}")

# platform
IF(APPLE)
  SET(PLATFORM_HEADER)
  SET(PLATFORM_SOURCES)
  SET(PLATFORM_LIBRARIES)
ELSEIF(UNIX)
  SET(PLATFORM_HEADER)
  SET(PLATFORM_SOURCES)
  SET(PLATFORM_LIBRARIES rt m z pthread)
ENDIF(APPLE)

FIND_PACKAGE(Cassandra REQUIRED)
FIND_PACKAGE(Common REQUIRED)
FIND_PACKAGE(JSON-C REQUIRED)
IF(NOT TARGET inih)
  ADD_SUBDIRECTORY(${CMAKE_SOURCE_DIR}/src/third-party/ini inih)
ENDIF(NOT TARGET inih)

SET(PRIVATE_INCLUDE_DIRECTORIES_SERVICE
  ${PRIVATE_INCLUDE_DIRECTORIES_SERVICE}
  ${CMAKE_SOURCE_DIR}/src
  ${COMMON_INCLUDE_DIRS}
  ${JSONC_INCLUDE_DIRS}
  ${CASSANDRA_INCLUDE_DIRS}
  ${CMAKE_SOURCE_DIR}/src/third-party/ini
  ${CMAKE_SOURCE_DIR}/src/third-party/sds
)

SET(RUN_DIR_PATH "/var/run/${SERVICE_NAME}")
SET(PIDFILE_PATH "${RUN_DIR_PATH}/${SERVICE_NAME}.pid")
SET(USER_NAME ${PROJECT_NAME_LOWERCASE})
SET(USER_GROUP ${PROJECT_NAME_LOWERCASE})
SET(CONFIG_FILE_PATH "/etc/${SERVICE_NAME}.conf")

SET(PRIVATE_COMPILE_DEFINITIONS_SERVICE ${PRIVATE_COMPILE_DEFINITIONS_SERVICE}
  -DHARDWARE_LICENSE_ALGO=${HARDWARE_LICENSE_ALGO}
  -DUSER_NAME="${USER_NAME}"
  -DUSER_GROUP="${USER_GROUP}"
  -DCONFIG_FILE_PATH="${CONFIG_FILE_PATH}"
  -DLICENSE_KEY="${LICENSE_KEY}"
  -DPIDFILE_PATH="${PIDFILE_PATH}"
  -DCORE_LIBRARY="${CORE_LIBRARY}"
  -DPIDFILE_PATH="${PIDFILE_PATH}"
  -DSERVICE_NAME="${SERVICE_NAME}"
  -DRELATIVE_SOURCE_DIR="${RELATIVE_SOURCE_DIR}"
)

SET(SERVICE_SOURCES ${SERVICE_SOURCES}
  ${GLOBAL_HEADERS} ${GLOBAL_SOURCES}
  ${DATABASE_HEADERS} ${DATABASE_SOURCES}
  ${ARCHIVE_HEADERS} ${ARCHIVE_SOURCES}
)

SET(SERVICE_LIBRARIES ${SERVICE_LIBRARIES}
  ${SNIFFER_COMMON}
  ${COMMON_LIBRARIES} ${CASSANDRA_LIBRARIES}
  ${JSONC_LIBRARIES} inih pcap udev ${PLATFORM_LIBRARIES}
)

ADD_EXECUTABLE(${SERVICE_NAME_EXE} ${SERVICE_SOURCES} main.cpp ${SDS_SOURCES})
TARGET_INCLUDE_DIRECTORIES(${SERVICE_NAME_EXE} PRIVATE ${PRIVATE_INCLUDE_DIRECTORIES_SERVICE})
TARGET_COMPILE_DEFINITIONS(${SERVICE_NAME_EXE} PRIVATE ${PRIVATE_COMPILE_DEFINITIONS_SERVICE})
TARGET_LINK_LIBRARIES(${SERVICE_NAME_EXE} ${SERVICE_LIBRARIES})

IF(PROJECT_BUILD_TYPE_VERSION STREQUAL "release")
  STRIP_TARGET(${SERVICE_NAME_EXE})
ENDIF(PROJECT_BUILD_TYPE_VERSION STREQUAL "release")
INSTALL(TARGETS ${SERVICE_NAME_EXE} DESTINATION ${TARGET_INSTALL_DESTINATION} COMPONENT APPLICATIONS)

SET(EXECUTABLE_FOLDER_PATH /usr/local/bin)

IF(OS_WINDOWS)
ELSEIF(OS_MACOSX)
ELSEIF(OS_LINUX)
  SET(EXECUTABLE_PATH ${EXECUTABLE_FOLDER_PATH}/${SERVICE_NAME} CACHE INTERNAL "Daemon path: ${EXECUTABLE_PATH}")
ENDIF(OS_WINDOWS)

# service
SET(SERVICE_SCRIPT_GEN_PATH ${CMAKE_BINARY_DIR}/service/${SERVICE_NAME}.service)
GEN_SERVICE_SERVICE_FILE(${SERVICE_SCRIPT_GEN_PATH}
  ${SERVICE_NAME} ${SERVICE_NAME_EXE}
  ${EXECUTABLE_PATH}
  ${RUN_DIR_PATH}
  ${PIDFILE_PATH}
  ${USER_NAME} ${USER_GROUP}
  ${PROJECT_SUMMARY}
)
INSTALL(FILES ${SERVICE_SCRIPT_GEN_PATH} DESTINATION /etc/systemd/system/)

SET(SERVICE_DEB_SCRIPT_GEN_PATH ${CMAKE_BINARY_DIR}/service/${SERVICE_NAME}.debian)
GEN_DEBIAN_SERVICE_FILE(${SERVICE_DEB_SCRIPT_GEN_PATH}
  ${SERVICE_NAME} ${SERVICE_NAME_EXE}
  ${EXECUTABLE_PATH}
  ${RUN_DIR_PATH}
  ${PIDFILE_PATH}
  ${USER_NAME} ${USER_GROUP}
  ${PROJECT_SUMMARY}
)
INSTALL(FILES ${SERVICE_DEB_SCRIPT_GEN_PATH}
  DESTINATION /etc/init.d
  RENAME ${SERVICE_NAME}
  PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ GROUP_EXECUTE WORLD_READ WORLD_EXECUTE)

SET(SERVICE_CONF_GEN_PATH ${CMAKE_BINARY_DIR}/service/${SERVICE_NAME}.conf)
CONFIGURE_FILE(${CMAKE_SOURCE_DIR}/install/${PROJECT_NAME_LOWERCASE}/service/service.conf.in
  ${SERVICE_CONF_GEN_PATH} @ONLY IMMEDIATE
)
IF(NOT EXISTS ${CONFIG_FILE_PATH})
  INSTALL(FILES ${SERVICE_CONF_GEN_PATH} DESTINATION /etc/)
ENDIF(NOT EXISTS ${CONFIG_FILE_PATH})

# exe script
SET(SERVICE_START_SCRIPT_GEN_PATH ${CMAKE_BINARY_DIR}/service/${SERVICE_NAME})
GEN_START_SCRIPT(${SERVICE_START_SCRIPT_GEN_PATH} ${SERVICE_NAME})
INSTALL(PROGRAMS ${SERVICE_START_SCRIPT_GEN_PATH} DESTINATION ${TARGET_INSTALL_DESTINATION} COMPONENT APPLICATIONS)

# install other
INSTALL(FILES ${CMAKE_SOURCE_DIR}/LICENSE DESTINATION . COMPONENT LICENSE RENAME LICENSE OPTIONAL)
INSTALL(FILES ${CMAKE_SOURCE_DIR}/COPYRIGHT DESTINATION . COMPONENT LICENSE RENAME COPYRIGHT OPTIONAL)
INSTALL(FILES ${PROJECT_CHANGELOG_FILE} DESTINATION . COMPONENT LICENSE RENAME CHANGELOG OPTIONAL)

# developer

IF (DEVELOPER_CHECK_STYLE)
  SET(CHECK_SOURCES ${SERVICE_SOURCES})
  REGISTER_CHECK_STYLE_TARGET(check_style_${SERVICE_NAME} "${CHECK_SOURCES}")
  REGISTER_CHECK_INCLUDES_TARGET(${SERVICE_NAME})
ENDIF(DEVELOPER_CHECK_STYLE)

IF(DEVELOPER_ENABLE_TESTS)
  FIND_PACKAGE(GTest REQUIRED)
  ADD_DEFINITIONS(-DTEST_FOLDER_PATH="${CMAKE_SOURCE_DIR}/tests/")
  SET(UNIT_TESTS_PROJECT_NAME ${PROJECT_NAME}_unit_tests)
  SET(UNIT_TESTS_SOURCES ${CMAKE_SOURCE_DIR}/tests/sniffer_unit_tests.cpp)
  ADD_EXECUTABLE(${UNIT_TESTS_PROJECT_NAME} ${UNIT_TESTS_SOURCES})
  TARGET_LINK_LIBRARIES(${UNIT_TESTS_PROJECT_NAME} ${GTEST_BOTH_LIBRARIES} ${PLATFORM_LIBRARIES})

  SET(INTEGRATION_TESTS_PROJECT_NAME ${PROJECT_NAME}_integration_tests)
  SET(INTEGRATION_TESTS_SOURCES ${CMAKE_SOURCE_DIR}/tests/read_pcap_file.cpp)
  ADD_EXECUTABLE(${INTEGRATION_TESTS_PROJECT_NAME} ${INTEGRATION_TESTS_SOURCES})
  TARGET_LINK_LIBRARIES(${INTEGRATION_TESTS_PROJECT_NAME} pcap)
  TARGET_INCLUDE_DIRECTORIES(${INTEGRATION_TESTS_PROJECT_NAME} PRIVATE ${CMAKE_CURRENT_SOURCE_DIR})
ENDIF(DEVELOPER_ENABLE_TESTS)
